@inject IJSRuntime js

<h1>@Titulo</h1>


<table class="table">
    <thead>
        <tr>
            <th>Ação</th>
            <th>Data</th>
            <th>Descrição</th>
            <th>Concluída</th>
        </tr>
    </thead>
    <tbody>
        <ListaGenerica ListaItem="tarefas">
            <Lista Context="tarefa">
                <tr>
                    <TarefaIndividual item="tarefa" RemoverTarefa="RemoveTarefa" />
                </tr>
            </Lista>
        </ListaGenerica>

    </tbody>
</table>

<Confirma @ref="confirmacao" onCancela="CancelaConfirmacao" 
          onConfirma="RemoverTarefaConfirmacao">
    <div>Deseja excluir esta tarefa?</div>
</Confirma>


@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa:</label>
        <input type="text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}

@code{

    [Parameter] public List<Tarefa> tarefas { get; set; }

    [Parameter] public string Titulo { get; set; }

    private string novaTarefa = "";

    //instancia do componente Confirma
    Confirma confirmacao;

    Tarefa tarefaRemover;

    //chamada da janela de diálogo do bootstrap
    //private void RemoveTarefa(Tarefa tarefa)
    //{
    //    confirmacao.Exibir();
    //    tarefaRemover = tarefa;
    //}

    //usando a injeção JS. Abre a janela do JS que está sendo invocada no C#
    //método que obtém retorno -> InvokeAsync
    //método que não obtém retorno -> InvokeVoidAsync
    private async Task RemoveTarefa(Tarefa tarefa)
    {
        var resultado = await js.InvokeAsync<bool>("confirm", "Excluir tarefa?");

        if (resultado)
        {
            tarefas.Remove(tarefa);
            //await js.InvokeVoidAsync("alert", "Tarefa excluída com sucesso!");

            //invocando função JS criada em JSFunctions.js
            await js.InvokeAsync<object>("MostraAlerta", "Ok, tarefa excluída!");
        }
    }

    //Se for necessário chamar o método de forma síncrona (apenas do lado do cliente)
    //private void RemoveTarefa(Tarefa tarefa)
    //{
    //    var resultado = ((IJSInProcessRuntime)js).Invoke<bool>("confirm", "Excluir tarefa?");

    //    if (resultado)
    //    {
    //        tarefas.Remove(tarefa);
    //    }
    //}

    void RemoverTarefaConfirmacao()
    {
        tarefas.Remove(tarefaRemover);
        tarefaRemover = null;
        confirmacao.Ocultar();
    }

    void CancelaConfirmacao()
    {
        confirmacao.Ocultar();
        tarefaRemover = null;
    }

    void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });
            novaTarefa = "";
        }
    }
}
